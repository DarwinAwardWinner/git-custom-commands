# git-in-repo

Determine if the current directory is in a git repository. Returns
true if so, false otherwise. This is mostly for use in other scripts,
so that they can abort if run outside a git repo.

## Usage

    if git in-repo; then
      git status
    else
      echo "Not in a git repository"
    fi

# git-subdirs

Run a single git command in all subdirectories

## Usage

Run a git command in each subdirectory of the current directory:

    git subdirs COMMAND

Same, but with write permissions.

    git subdirs --allow-write COMMAND

## Description

This command will run `git COMMAND` in each subdirectory of the
current directory if that subdirectory is a git repository, By
default, it uses `unionfs-fuse` to run git in a read-only view of the
repository. This allows you to run commands to query the status of
each repository such as `status` and `log` without risk of
accidentally damaging many repositories at once with a command like
`branch -D master`.

If `unionfs-fuse` is unavailable, read-only mode is disabled.

You can use the `--allow-write` option to run a command that modifies
the repositories. I recommend that you think carefully before using
this option.

If the current directory is inside a git repository, this command will
do nothing, and suggest that you simply run `git COMMAND` instead.

# git-setup-github-origin

Set up a github repo as "origin."

## Usage

Set Github username (required for use):

    git config --global github.user GITHUB_USERNAME

Set up origin to refer to the Github repository owned by you with the
same name as current directory:

    git setup-github-origin

Specify the Github repository name explicitly:

    git setup-github-origin GITHUB_REPO_NAME

Force Github to be origin even if the repo already has an origin set up:

    git setup-github-origin --force

## What it does

### Set up remote origin

The following configuration variables are set in the local repository:

    remote.origin.url = git@github.com:${GITHUB_USERNAME}/${GITHUB_REPO_NAME}.git
    remote.origin.fetch = +refs/heads/*:refs/remotes/origin/*

This is equivalent to the directions given by Github when you create a
new repository.

If `remote.origin.url` is already set, then you must specify `--force`
in order to overwrite anything.

### Set up branch master

In addition, if `branch.master.remote` is unset, the following
variables are set:

    branch.master.remote = origin
    branch.master.merge = refs/heads/master

Github does not mention setting these variables commands when you
create a new repository, but they are set automatically when you clone
an existing one. So if you want all your Github repositories to have
comparable configs whether you first cloned from Github or started
from scratch, you must set these in repos that you started locally.

## Future

If I find an easy way to check for the existence of a Github repo and
create a Github repo from the command-line, I can have this command
auto-create a repo if it doesn't exist. Suggestions welcome.

# git-forest

This was not originally written by me. The original is from [http://jengelh.medozas.de/projects/hxtools/]. I made some minor modifications to it. You'll have to diff it with the
original to see.
